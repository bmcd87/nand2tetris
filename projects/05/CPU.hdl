// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Mux16(a=outA, b=inM, sel=instruction[12], out=aOrM);
    ALU(x=outD, y=aOrM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=zr, ng=ng);

    // jmp stuff
    DMux8Way(in=instruction[15], sel=instruction[0..2], a=nullJmp, b=jgt, c=jeq, d=jge, e=jlt, f=jne, g=jle, h=jmp);
    Not(in=zr, out=notZ);
    Not(in=ng, out=notN);
    And(a=notZ, b=notN, out=notZNotN);
    Or(a=zr, b=ng, out=zOrN);
    And(a=jgt, b=notZNotN, out=jgtVal);
    And(a=jeq, b=zr, out=jeqVal);
    And(a=jge, b=notN, out=jgeVal);
    And(a=jlt, b=ng, out=jltVal);
    And(a=jne, b=notZ, out=jneVal);
    And(a=jle, b=zOrN, out=jleVal);
    Or8Way(in[0]=false, in[1]=jgtVal, in[2]=jeqVal, in[3]=jgeVal, in[4]=jltVal, in[5]=jneVal, in[6]=jleVal, in[7]=jmp, out=jump);

    And(a=instruction[4], b=instruction[15], out=loadM);
    DRegister(in=aluOut, load=loadM, out=outD); // done
    Not(in=instruction[15], out=aIns); // done
    Mux16(a=aluOut, b=instruction, sel=aIns, out=aInsValOrOutVal); // done
    Or(a=aIns, b=instruction[5], out=aInsOrSetA); // done
    ARegister(in=aInsValOrOutVal, load=aInsOrSetA, out[0..15]=outA, out[0..14]=addressM); // done
    Not(in=jump, out=notJump); // done
    Not(in=reset, out=notReset); // done
    Or(a=notJump, b=notReset, out=notJumpOrReset); // done
    PC(in=outA, load=jump, inc=notJumpOrReset, reset=reset, out[0..14]=pc);
    And(a=instruction[3], b=instruction[15], out=writeM); // done
}
